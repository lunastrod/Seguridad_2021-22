#!/usr/bin/env python3
import sys

char_frequency = {
    "A":0.08167,
    "B":0.01492,
    "C":0.02782,
    "D":0.04253,
    "E":0.12702,
    "F":0.02228,
    "G":0.02015,
    "H":0.06094,
    "I":0.06966,
    "J":0.00153,
    "K":0.00772,
    "L":0.04025,
    "M":0.02406,
    "N":0.06749,
    "O":0.07507,
    "P":0.01929,
    "Q":0.00095,
    "R":0.05987,
    "S":0.06327,
    "T":0.09056,
    "U":0.02758,
    "Y":0.00978,
    "W":0.02360,
    "X":0.00150,
    "Y":0.01974,
    "Z":0.00074
}

bigrams=['TH', 'HE', 'IN', 'EN', 'NT', 'RE', 'ER', 'AN', 'TI', 'ES', 'ON', 'AT', 'SE', 'ND', 'OR', 'AR', 'AL', 'TE', 'CO', 'DE', 'TO', 'RA', 'ET', 'ED', 'IT', 'SA', 'EM', 'RO']
trigrams=['THE', 'AND', 'THA', 'ENT', 'ING', 'ION', 'TIO', 'FOR', 'NDE', 'HAS', 'NCE', 'EDT', 'TIS', 'OFT', 'STH', 'MEN']

DEBUG=True

def caesar_encrypt(text, key):
    text=text.upper()
    encrypted=""
    for c in text:
        if(c.isupper()):
            c=chr((ord(c)+key-ord("A"))%26+ord("A"))
        encrypted+=c
    return encrypted

def calculate_bigrams_freq(text):
    result=0
    for b in bigrams:
        result+=text.count(b)
    return result

def calculate_trigrams_freq(text):
    result=0
    for t in trigrams:
        result+=text.count(t)
    return result

def calculate_relative_freq(text):
    text_frequencies={}#guarda las frecuencias absolutas de cada letra que aparece en el texto
    text=text.upper()
    length=0
    for c in text:
        if(c.isupper()):
            length+=1
            if c in text_frequencies:
                text_frequencies[c]+=1
            else:
                text_frequencies[c]= 1

    result=0
    for c in char_frequency:
        result+=abs(float(text_frequencies.get(c) or 0)/length-char_frequency[c])
    return result

def caesar_decrypt(text):
    #guardo el texto repetido 26 veces, pero da igual incluso para textos largos (6.5MB)
    result=[]
    for i in range(26):
        if(DEBUG):
            print("decrypting...",i)
        text_attempt=caesar_encrypt(text,-i)
        attempt=(i,text_attempt,calculate_relative_freq(text_attempt),calculate_bigrams_freq(text_attempt),calculate_trigrams_freq(text_attempt))
        result.append(attempt)

    #Se que no hace falta hacer un sort, pero es tan r√°pido que da igual, incluso para textos largos (6.5MB)
    solutions={}
    result.sort(key=lambda x:x[2])#frequencies
    solutions[result[0][0]]=result[0]
    result.sort(key=lambda x:-x[3])#bigrams
    solutions[result[0][0]]=result[0]
    result.sort(key=lambda x:-x[4])#trigrams
    solutions[result[0][0]]=result[0]

    return solutions

if(len(sys.argv)!=1):
    print("argc error", file=sys.stderr)
    exit(-1)

text=""
for line in sys.stdin:
    text+=line


solutions=caesar_decrypt(text)
for i in solutions:
    print("key =",i)